<templateSet group="React">
  <template name="rsi" value="import React from &quot;react&quot;&#10;&#10;const $TM_FILENAME_BASE$:React.FC = () =&gt; {&#10; return &lt;&gt;&lt;/&gt;&#10;}&#10;&#10;export default $TM_FILENAME_BASE$&#10;" description="Creates a stateless React component without PropTypes and ES6 module system but with Implicit Return and props" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rsip" value="import React from &quot;react&quot;&#10;&#10;interface $TM_FILENAME_BASE$Props {&#10;  value: string&#10;  func: () =&gt; void&#10;}&#10;&#10;const $TM_FILENAME_BASE$: React.FC&lt;$TM_FILENAME_BASE$Props &gt; = ({ value, func }) =&gt; {&#10;  return &lt;&gt;&lt;/&gt;&#10;}&#10;&#10;export default $TM_FILENAME_BASE$&#10;" description="Creates a stateless React component without PropTypes and ES6 module system but with Implicit Return and props" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="svg" value="import React from &quot;react&quot;&#10;import Icon from &quot;@ant-design/icons&quot;&#10;&#10;const $TM_FILENAME_BASE$SVG = () =&gt; (&#10;&#10;)&#10;&#10;const $TM_FILENAME_BASE$: React.FC = () =&gt; {&#10;  return &lt;Icon component={$TM_FILENAME_BASE$SVG} /&gt;&#10;}&#10;&#10;export default $TM_FILENAME_BASE$&#10;" description="Creates a stateless React component without PropTypes and ES6 module system but with Implicit Return and props" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="tryc" value="try {&#10;&#10;} catch (e) {&#10;    console.error(e)&#10;    &#10;}" description="Create try catch statement" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="trycf" value="try {&#10;&#10;} catch (e) {&#10;    console.error(e)&#10;    &#10;} finally {&#10;&#10;}" description="Create try catch finally" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="thunk" value="const name =&#10;  (): AppThunk&lt;Promise&lt;void&gt;&gt; =&gt;&#10;  async (dispatch, getState) =&gt; {}" description="Create thunk" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>